import{_ as o,c as t,o as e,Q as s}from"./chunks/framework.ef145a76.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/javascript/事件循环.md","filePath":"web/javascript/事件循环.md"}'),r={name:"web/javascript/事件循环.md"},n=s('<h2 id="事件循环-event-loop" tabindex="-1">事件循环（Event Loop） <a class="header-anchor" href="#事件循环-event-loop" aria-label="Permalink to &quot;事件循环（Event Loop）&quot;">​</a></h2><ol><li><p><strong>先执行所有同步代码</strong></p></li><li><p><strong>执行所有微任务（Microtasks，如 <code>Promise.then()</code>、<code>queueMicrotask()</code>、<code>MutationObserver</code>）</strong></p></li><li><p><strong>执行一个宏任务（Macrotask，如 <code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>requestAnimationFrame</code>）</strong></p></li><li><p><strong>回到第 2 步，重复执行，直到所有任务完成</strong></p></li></ol><h2 id="代码执行顺序" tabindex="-1">代码执行顺序 <a class="header-anchor" href="#代码执行顺序" aria-label="Permalink to &quot;代码执行顺序&quot;">​</a></h2><p>JavaScript 的执行顺序由 <strong>执行上下文（Execution Context）</strong> 和 <strong>事件循环（Event Loop）</strong> 决定，主要分为 <strong>同步任务（Synchronous Tasks）</strong> 和 <strong>异步任务（Asynchronous Tasks）</strong>。</p><p>JS 采用 <strong>单线程</strong> 执行，执行顺序如下：</p><ol><li><p><strong>创建全局执行上下文（Global Execution Context）</strong></p></li><li><p><strong>执行同步任务（Synchronous Tasks）</strong></p></li><li><p><strong>遇到异步任务，加入相应的任务队列（Callback Queue 或 Microtask Queue）</strong></p></li><li><p><strong>同步任务执行完毕后，开始执行异步任务（通过 Event Loop 机制）</strong></p></li></ol>',6),a=[n];function c(i,l,p,d,_,g){return e(),t("div",null,a)}const m=o(r,[["render",c]]);export{h as __pageData,m as default};
