import{_ as e,c as t,o,Q as a}from"./chunks/framework.ef145a76.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/react/react的渲染.md","filePath":"web/react/react的渲染.md"}'),r={name:"web/react/react的渲染.md"},s=a(`<p>react的渲染主要分为两大阶段</p><table><thead><tr><th>阶段</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td><strong>Render Phase（渲染阶段）</strong></td><td>计算新的 UI 树，调用组件函数，返回虚拟 DOM（VNode/Fiber 树）</td><td>可以被打断，<strong>纯计算，不触发副作用</strong></td></tr><tr><td><strong>Commit Phase（提交阶段）</strong></td><td>把变化应用到 DOM 上（副作用也在这阶段执行）</td><td>不可中断，<strong>执行副作用，如 DOM 更新、ref 设置、生命周期回调等</strong></td></tr></tbody></table><h2 id="初始挂载流程" tabindex="-1">初始挂载流程： <a class="header-anchor" href="#初始挂载流程" aria-label="Permalink to &quot;初始挂载流程：&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const root = ReactDOM.createRoot(document.getElementById(&#39;root&#39;));</span></span>
<span class="line"><span style="color:#e1e4e8;">root.render(&lt;App /&gt;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const root = ReactDOM.createRoot(document.getElementById(&#39;root&#39;));</span></span>
<span class="line"><span style="color:#24292e;">root.render(&lt;App /&gt;);</span></span></code></pre></div><h4 id="render-phase" tabindex="-1">Render Phase <a class="header-anchor" href="#render-phase" aria-label="Permalink to &quot;Render Phase&quot;">​</a></h4><ol><li><strong>调用 <code>render()</code> 或函数组件，生成虚拟 DOM 树（React Element）</strong></li><li><strong>React 创建 Fiber 树结构</strong></li><li><strong>对每个组件调用</strong>（函数组件调用函数，类组件调用 <code>render()</code>）构建每层子 Fiber</li><li><strong>协调（Reconciliation）</strong>：确定哪些节点要插入、删除、更新</li></ol><p>注：此阶段可以被中断（支持时间分片、优先级、并发等）</p><h4 id="commit-phase" tabindex="-1">Commit Phase <a class="header-anchor" href="#commit-phase" aria-label="Permalink to &quot;Commit Phase&quot;">​</a></h4><ol><li>将变化应用到真实 DOM（如 <code>appendChild</code>）</li><li>执行副作用： <ul><li><code>componentDidMount</code></li><li><code>useEffect</code>（在 Layout Effects 之后）</li><li>设置 <code>ref</code></li></ul></li></ol><h2 id="更新流程" tabindex="-1">更新流程： <a class="header-anchor" href="#更新流程" aria-label="Permalink to &quot;更新流程：&quot;">​</a></h2><p>当组件的 <code>state</code>、<code>props</code> 或 <code>context</code> 变化时，会触发更新。</p><h4 id="render-phase-1" tabindex="-1">Render Phase <a class="header-anchor" href="#render-phase-1" aria-label="Permalink to &quot;Render Phase&quot;">​</a></h4><ol><li>调用函数组件或 <code>render()</code> 方法重新生成新的虚拟 DOM 树</li><li>与旧的 Fiber 树做 <strong>Diff 对比</strong></li><li>标记需要更新、移动或删除的节点（即：effectList）</li></ol><h4 id="commit-phase-1" tabindex="-1">Commit Phase <a class="header-anchor" href="#commit-phase-1" aria-label="Permalink to &quot;Commit Phase&quot;">​</a></h4><ol><li><p>应用真实 DOM 的更新（只更新变化的部分）</p></li><li><p>执行副作用：</p><ul><li><code>componentDidUpdate</code></li><li><code>useEffect</code></li><li><code>ref</code> 更新</li><li><code>useLayoutEffect</code>（同步执行）</li></ul></li></ol>`,15),l=[s];function n(c,d,i,h,p,m){return o(),t("div",null,l)}const _=e(r,[["render",n]]);export{g as __pageData,_ as default};
