import{_ as e,c as s,o as n,Q as o}from"./chunks/framework.ef145a76.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/配置/webpack/配置笔记.md","filePath":"web/配置/webpack/配置笔记.md"}'),t={name:"web/配置/webpack/配置笔记.md"},a=o(`<h2 id="node-options-r-ts-node-register-no-warnings" tabindex="-1">NODE_OPTIONS=&quot;-r ts-node/register --no-warnings&quot; <a class="header-anchor" href="#node-options-r-ts-node-register-no-warnings" aria-label="Permalink to &quot;NODE_OPTIONS=&quot;-r ts-node/register --no-warnings&quot;&quot;">​</a></h2><p>开源项目“electron-react-boilerplate” 中配置如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#e1e4e8;">	// ......</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;prestart&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack --config ./.erb/configs/webpack.config.main.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;start&quot;: &quot;ts-node ./.erb/scripts/check-port-in-use.js &amp;&amp; npm run prestart &amp;&amp; npm run start:renderer&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;start:main&quot;: &quot;concurrently -k -P \\&quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --watch --config ./.erb/configs/webpack.config.main.dev.ts\\&quot; \\&quot;electronmon . {@} --\\&quot; &quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;start:preload&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack --config ./.erb/configs/webpack.config.preload.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;start:renderer&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack serve --config ./.erb/configs/webpack.config.renderer.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;test&quot;: &quot;jest&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#24292e;">	// ......</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;prestart&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack --config ./.erb/configs/webpack.config.main.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;start&quot;: &quot;ts-node ./.erb/scripts/check-port-in-use.js &amp;&amp; npm run prestart &amp;&amp; npm run start:renderer&quot;,</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;start:main&quot;: &quot;concurrently -k -P \\&quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --watch --config ./.erb/configs/webpack.config.main.dev.ts\\&quot; \\&quot;electronmon . {@} --\\&quot; &quot;,</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;start:preload&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack --config ./.erb/configs/webpack.config.preload.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;start:renderer&quot;: &quot;cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true NODE_OPTIONS=\\&quot;-r ts-node/register --no-warnings\\&quot; webpack serve --config ./.erb/configs/webpack.config.renderer.dev.ts&quot;,</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &quot;test&quot;: &quot;jest&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  },</span></span></code></pre></div><h3 id="ts-node-transpile-only-true" tabindex="-1">TS_NODE_TRANSPILE_ONLY=true <a class="header-anchor" href="#ts-node-transpile-only-true" aria-label="Permalink to &quot;TS_NODE_TRANSPILE_ONLY=true&quot;">​</a></h3><p>这是 <code>ts-node</code> 的一个配置选项，表示：</p><p><strong>只使用 TypeScript 转译（transpile），不做类型检查（type-check）</strong>。</p><p>为什么构建流程中跳过类型检查？</p><p>是因为可以 *** 提升构建和启动速度 ***</p><p>构建时，代码已经通过了 IDE 或 <code>tsc --noEmit</code> 的类型检查，不必再花时间检查一遍。</p><h3 id="node-options-r-ts-node-register-no-warnings-1" tabindex="-1"><code>NODE_OPTIONS=&quot;-r ts-node/register --no-warnings&quot;</code> <a class="header-anchor" href="#node-options-r-ts-node-register-no-warnings-1" aria-label="Permalink to &quot;\`NODE_OPTIONS=&quot;-r ts-node/register --no-warnings&quot;\`&quot;">​</a></h3><p><code>-r ts-node/register</code></p><p>表示启动时自动注册 <code>ts-node</code>，使得 Node.js 能直接运行 <code>.ts</code> 文件（无需预编译）</p><p>--no-warnings</p><p>表示禁止输出所有 Node.js 警告（Warning）信息。有些第三方包（如 <code>electron</code>, <code>webpack</code>）在 dev 模式下会有无关紧要的警告。避免污染终端输出，提升开发体验。</p><h3 id="ts-node-register-是-commonjs-的-那为啥还能用-import" tabindex="-1"><code>ts-node/register</code> 是 CommonJS 的？那为啥还能用 <code>import</code>？ <a class="header-anchor" href="#ts-node-register-是-commonjs-的-那为啥还能用-import" aria-label="Permalink to &quot;\`ts-node/register\` 是 CommonJS 的？那为啥还能用 \`import\`？&quot;">​</a></h3><p>TypeScript 运行时兼容 ESModule 的两种方式：</p><p>在 CommonJS 模式中，允许使用 <code>import/export</code>（非标准） 在 <code>tsconfig.json</code> 中配置 <code>&quot;module&quot;: &quot;commonjs&quot;</code> 仍能用 <code>import</code> 是因为 TypeScript 支持“语法层转译”，并将其转成 <code>require</code> 这是<code>ts-node/register</code> 默认支持的方式</p><p>但是，如果启用 <code>&quot;module&quot;: &quot;ESNext&quot;</code> 并用原生 ESM 模式 那就不能用 <code>ts-node/register</code>，而要改用：<code>ts-node-esm</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node --loader ts-node/esm ./my-script.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node --loader ts-node/esm ./my-script.ts</span></span></code></pre></div>`,19),p=[a];function r(c,l,i,d,u,q){return n(),s("div",null,p)}const N=e(t,[["render",r]]);export{_ as __pageData,N as default};
