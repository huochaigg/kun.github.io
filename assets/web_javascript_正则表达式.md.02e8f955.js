import{_ as s,c as a,o as e,Q as n}from"./chunks/framework.ef145a76.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/javascript/正则表达式.md","filePath":"web/javascript/正则表达式.md"}'),o={name:"web/javascript/正则表达式.md"},l=n(`<p>这一篇写的贼好：</p><p>作者：老姚</p><p>链接：<a href="https://juejin.cn/post/6844903487155732494" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903487155732494</a></p><p>来源：稀土掘金</p><h2 id="什么是模糊匹配" tabindex="-1">什么是模糊匹配 <a class="header-anchor" href="#什么是模糊匹配" aria-label="Permalink to &quot;什么是模糊匹配&quot;">​</a></h2><h3 id="_1-横向模糊匹配" tabindex="-1">1.横向模糊匹配 <a class="header-anchor" href="#_1-横向模糊匹配" aria-label="Permalink to &quot;1.横向模糊匹配&quot;">​</a></h3><p><code>{m,n}</code>，表示连续出现最少m次，最多n次</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var regex = /ab{2,5}c/g; </span></span>
<span class="line"><span style="color:#e1e4e8;">var string = &quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;; console.log( string.match(regex) );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var regex = /ab{2,5}c/g; </span></span>
<span class="line"><span style="color:#24292e;">var string = &quot;abc abbc abbbc abbbbc abbbbbc abbbbbbc&quot;; console.log( string.match(regex) );</span></span></code></pre></div><h3 id="_2-纵向模糊匹配" tabindex="-1">2.纵向模糊匹配 <a class="header-anchor" href="#_2-纵向模糊匹配" aria-label="Permalink to &quot;2.纵向模糊匹配&quot;">​</a></h3><p><code>/a[123]b/</code>可以匹配如下三种字符串：&quot;a1b&quot;、&quot;a2b&quot;、&quot;a3b&quot;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var regex = /a[123]b/g; </span></span>
<span class="line"><span style="color:#e1e4e8;">var string = &quot;a0b a1b a2b a3b a4b&quot;; </span></span>
<span class="line"><span style="color:#e1e4e8;">console.log( string.match(regex) ); // =&gt; [&quot;a1b&quot;, &quot;a2b&quot;, &quot;a3b&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var regex = /a[123]b/g; </span></span>
<span class="line"><span style="color:#24292e;">var string = &quot;a0b a1b a2b a3b a4b&quot;; </span></span>
<span class="line"><span style="color:#24292e;">console.log( string.match(regex) ); // =&gt; [&quot;a1b&quot;, &quot;a2b&quot;, &quot;a3b&quot;]</span></span></code></pre></div><h2 id="常见简写" tabindex="-1">常见简写 <a class="header-anchor" href="#常见简写" aria-label="Permalink to &quot;常见简写&quot;">​</a></h2><p>**<code>\\d</code>**就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p><p>**<code>\\D</code>**就是<code>[^0-9]</code>。表示除数字外的任意字符。</p><p>**<code>\\w</code>**就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p><p>**<code>\\W</code>**是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p><p>**<code>\\s</code>**是<code>[ \\t\\v\\n\\r\\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p><p>**<code>\\S</code>**是<code>[^ \\t\\v\\n\\r\\f]</code>。 非空白符。</p><p>**<code>.</code>**就是<code>[^\\n\\r\\u2028\\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。</p><p>所以：</p><p>匹配任意字符，可以使用<code>[\\d\\D]</code>、<code>[\\w\\W]</code>、<code>[\\s\\S]</code>和<code>[^]</code>中任何的一个</p><h3 id="排除" tabindex="-1">排除 <a class="header-anchor" href="#排除" aria-label="Permalink to &quot;排除&quot;">​</a></h3><p><code>[^abc]</code>，表示是一个除&quot;a&quot;、&quot;b&quot;、&quot;c&quot;之外的任意一个字符</p><p>[] 中 ^ （脱字符），表示求反的概念</p><h2 id="贪婪匹配" tabindex="-1">贪婪匹配 <a class="header-anchor" href="#贪婪匹配" aria-label="Permalink to &quot;贪婪匹配&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var regex = /\\d{2,3}/g // 贪婪匹配</span></span>
<span class="line"><span style="color:#e1e4e8;">var string = &quot;123 1234 12345 123456&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">undefined</span></span>
<span class="line"><span style="color:#e1e4e8;">string.match(regex)</span></span>
<span class="line"><span style="color:#e1e4e8;">输出： [&#39;123&#39;, &#39;123&#39;, &#39;123&#39;, &#39;45&#39;, &#39;123&#39;, &#39;456&#39;]</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">var regex = /\\d{2,3}?/g // ? 非贪婪匹配</span></span>
<span class="line"><span style="color:#e1e4e8;">// 输出，非贪婪匹配，匹配到两个的时候，就不会匹配更多了</span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;12&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;56&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var regex = /\\d{2,3}/g // 贪婪匹配</span></span>
<span class="line"><span style="color:#24292e;">var string = &quot;123 1234 12345 123456&quot;;</span></span>
<span class="line"><span style="color:#24292e;">undefined</span></span>
<span class="line"><span style="color:#24292e;">string.match(regex)</span></span>
<span class="line"><span style="color:#24292e;">输出： [&#39;123&#39;, &#39;123&#39;, &#39;123&#39;, &#39;45&#39;, &#39;123&#39;, &#39;456&#39;]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var regex = /\\d{2,3}?/g // ? 非贪婪匹配</span></span>
<span class="line"><span style="color:#24292e;">// 输出，非贪婪匹配，匹配到两个的时候，就不会匹配更多了</span></span>
<span class="line"><span style="color:#24292e;">[&#39;12&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;56&#39;]</span></span></code></pre></div><h2 id="多选分支" tabindex="-1">多选分支 <a class="header-anchor" href="#多选分支" aria-label="Permalink to &quot;多选分支&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var regex = /good|goodbye/g;</span></span>
<span class="line"><span style="color:#e1e4e8;">var string = &quot;goodbye&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#e1e4e8;">// =&gt; [&quot;good&quot;] // 分支结构也是惰性的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var regex = /good|goodbye/g;</span></span>
<span class="line"><span style="color:#24292e;">var string = &quot;goodbye&quot;;</span></span>
<span class="line"><span style="color:#24292e;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#24292e;">// =&gt; [&quot;good&quot;] // 分支结构也是惰性的</span></span></code></pre></div><p>正则表达式中的 <code>|</code>（或）是<strong>从左到右优先匹配</strong>的</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var string = &quot;#ffbbad #Fc01DF #FFF #ffE&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">var regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;</span></span>
<span class="line"><span style="color:#e1e4e8;">var string = &quot;#ffbbad #Fc01DF #FFF #ffE&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;#ffbbad&#39;, &#39;#Fc01DF&#39;, &#39;#FFF&#39;, &#39;#ffE&#39;]</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">var regex = /#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})/g;</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;#ffb&#39;, &#39;#Fc0&#39;, &#39;#FFF&#39;, &#39;#ffE&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var string = &quot;#ffbbad #Fc01DF #FFF #ffE&quot;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;</span></span>
<span class="line"><span style="color:#24292e;">var string = &quot;#ffbbad #Fc01DF #FFF #ffE&quot;;</span></span>
<span class="line"><span style="color:#24292e;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#24292e;">[&#39;#ffbbad&#39;, &#39;#Fc01DF&#39;, &#39;#FFF&#39;, &#39;#ffE&#39;]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var regex = /#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})/g;</span></span>
<span class="line"><span style="color:#24292e;">console.log( string.match(regex) ); </span></span>
<span class="line"><span style="color:#24292e;">[&#39;#ffb&#39;, &#39;#Fc0&#39;, &#39;#FFF&#39;, &#39;#ffE&#39;]</span></span></code></pre></div><p>匹配颜色，如果左侧是3位，会优先匹配3位，所以需要把6位放在左侧优先匹配</p><h2 id="前瞻-后瞻" tabindex="-1">前瞻，后瞻 <a class="header-anchor" href="#前瞻-后瞻" aria-label="Permalink to &quot;前瞻，后瞻&quot;">​</a></h2><p>前瞻后瞻就是左顾右盼</p><p>前瞻 X(?=Y) 后瞻 (?=&lt;)</p><h2 id="什么是位置" tabindex="-1">什么是位置 <a class="header-anchor" href="#什么是位置" aria-label="Permalink to &quot;什么是位置&quot;">​</a></h2><h2 id="正则表达式回溯" tabindex="-1">正则表达式回溯 <a class="header-anchor" href="#正则表达式回溯" aria-label="Permalink to &quot;正则表达式回溯&quot;">​</a></h2><h2 id="常用正则" tabindex="-1">常用正则 <a class="header-anchor" href="#常用正则" aria-label="Permalink to &quot;常用正则&quot;">​</a></h2><p>时间： <code>/^([01][0-9]|[2][0-3]):[0-5][0-9]$/</code><code>23:59</code><code>02:07</code></p><p>日期： <code>/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</code> 2017-06-10</p><p>邮箱： <code>/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/</code><code>abc@163.com</code></p><p>手机号（中国大陆）： <code>/^1[3-9]\\d{9}$/</code><code>13812345678</code></p><p>座机号： <code>/^0\\d{2,3}-?\\d{7,8}$/</code><code>010-12345678</code></p><p>身份证（中国，15或18位） \`/^\\d{15} \\d{17}[0-9Xx]$/</p><p>QQ号 <code>/^[1-9]\\d{4,}$/</code><code>123456</code></p><p>微信号 <code>/^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/</code><code>wx_abc123</code></p><p>银行卡号（16~19位） <code>/^\\d{16,19}$/</code> 6222021234567890</p><h3 id="替换" tabindex="-1">替换 <a class="header-anchor" href="#替换" aria-label="Permalink to &quot;替换&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const str = &#39;我的电话是 13812345678&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;">const result = str.replace(/(\\d{3})\\d{4}(\\d{4})/, &#39;$1****$2&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(result); // 我的电话是 138****5678</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const str = &#39;我的电话是 13812345678&#39;;</span></span>
<span class="line"><span style="color:#24292e;">const result = str.replace(/(\\d{3})\\d{4}(\\d{4})/, &#39;$1****$2&#39;);</span></span>
<span class="line"><span style="color:#24292e;">console.log(result); // 我的电话是 138****5678</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const name = &#39;张 三&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;">const result = name.replace(/(\\S+)\\s+(\\S+)/, &#39;$2 $1&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(result); // 三 张</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const name = &#39;张 三&#39;;</span></span>
<span class="line"><span style="color:#24292e;">const result = name.replace(/(\\S+)\\s+(\\S+)/, &#39;$2 $1&#39;);</span></span>
<span class="line"><span style="color:#24292e;">console.log(result); // 三 张</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const html = &#39;&lt;b&gt;bold&lt;/b&gt;&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;">const result = html.replace(/&lt;b&gt;(.*?)&lt;\\/b&gt;/g, &#39;**$1**&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(result); // **bold**</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const html = &#39;&lt;b&gt;bold&lt;/b&gt;&#39;;</span></span>
<span class="line"><span style="color:#24292e;">const result = html.replace(/&lt;b&gt;(.*?)&lt;\\/b&gt;/g, &#39;**$1**&#39;);</span></span>
<span class="line"><span style="color:#24292e;">console.log(result); // **bold**</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const str = &#39;abc123 abc456 abc123&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;">const result = str.replace(/abc(?=123)/g, &#39;XYZ&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(result); // XYZ123 abc456 XYZ123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const str = &#39;abc123 abc456 abc123&#39;;</span></span>
<span class="line"><span style="color:#24292e;">const result = str.replace(/abc(?=123)/g, &#39;XYZ&#39;);</span></span>
<span class="line"><span style="color:#24292e;">console.log(result); // XYZ123 abc456 XYZ123</span></span></code></pre></div>`,51),p=[l];function c(t,r,i,d,b,g){return e(),a("div",null,p)}const y=s(o,[["render",c]]);export{u as __pageData,y as default};
